import IO from "IO"
import { Just, Nothing } from 'Maybe'
import type { Maybe } from 'Maybe'
// import type { Element } from 'MadUI'
import {} from 'Number'
import { split } from 'String'
import { tail, filter, nth, len } from 'List'
import { ifElse, always, notEquals, any } from 'Function'
import { lt } from 'Compare'

import { startsWith } from './String'
import { addIndex } from './Function'

imap = addIndex(map)

// Pitch!
// notEquals should become `isNot`
// equals should get an alias `is`

// !TODO: change when nullary functions land
getLocation = (_) => #- window.location.pathname -#

// applyRelativeTo :: a -> (b -> c) -> List b -> c
// applyRelativeTo = (that, fn, xs) => #- fn.apply(that, xs) -#
// apply = applyRelativeTo(null)

export alias RouteView = {
  path :: String
}

conditionalTaggedLog :: Boolean -> String -> String -> a -> a
conditionalTaggedLog = (condition, tag, x, y) => (
  condition
    ? IO.trace(tag ++ x, y)
    : y
)

CONFIG_SHOW_LOGS = true

taggedLog = conditionalTaggedLog(CONFIG_SHOW_LOGS)

type Match good = ExplicitMatch(good) | WildcardMatch(good) | NoMatch
alias LocationParts = List String

selectFrom :: List RouteView -> LocationParts -> List (Maybe RouteView)
selectFrom = (routes, routeParts) => addIndex(map)(
  (_, i) => nth(i, routes)
)(routeParts)


lookForMatches :: List RouteView -> LocationParts -> List (Match String)
export lookForMatches = (routes, given) => ifElse(
  any(startsWith(':')),
  map((x) => startsWith(':', x)
    ? WildcardMatch(x)
    : NoMatch
  ),
  pipe(
    selectFrom(routes),
    map(where {
      Just(x) => ExplicitMatch(x.path)
      Nothing => NoMatch
    })
  )
)(given)

initialPath = pipe(
  .path,
  split('/'),
  tail
)

testURI :: List RouteView -> LocationParts -> List (List (Match String))
export testURI = (routes, given) => map(
  pipe(
    initialPath, 
    ifElse(
      pipe(len, notEquals(len(given))),
      always([NoMatch]),
      lookForMatches(routes)
    )
  )
)(routes)

matchToBoolean :: Match(String) -> Boolean
matchToBoolean = (x) => pipe(
  where {
    ExplicitMatch(_) => true
    WildcardMatch(_) => true
    NoMatch => false
  }
)(x)

matchesURI :: List RouteView -> LocationParts -> Boolean
export matchesURI = (routes, given) => pipe(
  testURI(routes),
  any(any(matchToBoolean))
)(given)

decodeURI = (x) => #- decodeURIComponent(x) -#

// transformPathToParams :: List RouteView -> LocationParts -> List (List 
transformPathToParams = (routes, given) => map(pipe(
  initialPath,
  lookForMatches(routes),
  map((segments) => pipe(
    (gv) => ({given: gv, segments})
    // filter(startsWith(':'))
    // map(tail)
    // selectFrom(routes)
    // imap((propName, i) => <Just(propName), decodeURIComponent>)
  )(given))
))(routes)

instigateHead :: String -> LocationParts
instigateHead = pipe(
  split('/'),
  filter(notEquals('')),
  ifElse(
    pipe(len, lt(1)),
    tail,
    always([])
  )
)

instigate :: List RouteView -> String -> List (List {given :: List String, segments :: Match(String) })
export instigate = (routes, locationPath) => pipe(
  instigateHead,
  ifElse(
    matchesURI(routes),
    transformPathToParams(routes),
    always([])
  )
)(locationPath)

SAMPLE = [
  { path: '/alpha/beta' },
  { path: '/gamma/delta/:epsilon' },
  { path: '/name/:name/detail/:detail' }
]
testInstigate = instigate(SAMPLE)
#-
  if (typeof window !== 'undefined') {
    console.log("SAMPLE DATA", SAMPLE)
    console.log('here', getLocation())
    console.log('instigate / ', testInstigate(getLocation()))
    console.log('instigate /gamma/delta/cool', testInstigate('/gamma/delta/cool'))
    console.log('instigate /name/brekk/detail/testing', instigate(SAMPLE)('/name/brekk/detail/testing'))
  }
-#

#-
{Browser}
  window.instigate = instigate
  // window.traceOnce = traceOnce
  window.testURI = testURI
  window.matchesURI = matchesURI
  window.lookForMatches = lookForMatches
{/Browser}
-#

