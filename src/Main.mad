import IO from "IO"
import { Just, Nothing } from 'Maybe'
import type { Element } from 'MadUI'
import {} from 'Number'
import { split } from 'String'
import { filter, reduce, concat, nth, find, len, slice } from 'List'
import { memoize, ifElse, identity, always, notEquals, any } from 'Function'
import { lt } from 'Compare'

// Pitch!
// notEquals should become `isNot`
// equals should get an alias `is`

// !TODO: change when nullary functions land
getLocation = (_) => #- window.location.pathname -#

// applyRelativeTo :: a -> (b -> c) -> List b -> c
// applyRelativeTo = (that, fn, xs) => #- fn.apply(that, xs) -#
// apply = applyRelativeTo(null)

/* !TODO - move this to prelude/Function */
addIndex :: ((a -> b) -> c -> d) -> (a -> Number -> b) -> c -> d
addIndex = (fn, y, xs) => {
  i = 0
  return fn(
    (x) => {
      result = y(x, i)
      i = i + 1
      return result 
    },
    xs
  )
}

/* !TODO - move this to prelude/Function tests */
imap = addIndex(map)
ifilter = addIndex(filter)

/*
IO.trace(
  'imap',
  imap((x, i) => `${x}${show(i)}`, ['a', 'b', 'c'])
)

IO.trace(
  'ifilter',
  ifilter(
    (_, i) => i > 1,
    ['a', 'b', 'c', 'd']
  )
)
*/

/* !TODO - move this to prelude/String */
startsWith :: String -> String -> Boolean
startsWith = (needle, haystack) => #- haystack.startsWith(needle) -#

endsWith :: String -> String -> Boolean
endsWith = (needle, haystack) => #- haystack.endsWith(needle) -#

export alias RouteView = {
  path :: String
}

// selectFrom :: List RouteView -> List String -> List Maybe a
selectFrom = (routes, routeParts) => imap(
  (_, i) => nth(i, routes)
)(routeParts)

truthy = where {
  Just(_) => true
  Nothing => false
}

matchesURI :: List RouteView -> List a -> Boolean
matchesURI = (routes, given) => any(
  pipe(
    .path,
    split('/'),
    slice(1, Infinity),
    memoize(ifElse(

      pipe(len, notEquals(len(given))),
    
      always(false),
    
      (raw) => ifElse(
        any(startsWith(':')),
        always(true),
        pipe(
          selectFrom(routes),
          any(truthy)
        )
      )(raw)
    ))
  )
)(routes)

SAMPLE_ROUTES = [
  {path: '/alpha/beta'},
  {path: '/gamma/delta'},
  {path: '/epsilon/omega'},
  {path: '/a/b/:c'}
]

testMatch = matchesURI(
  SAMPLE_ROUTES
)

makeTaggedTrace = (x, tag) => IO.trace(x ++ tag)
printMatch = makeTaggedTrace('--> ')

printMatch('testMatch',
  testMatch(['gamma', 'delta'])
)
printMatch('gamma',
  testMatch(['gamma', ':jamma'])
)
printMatch('omega',
  testMatch(['omega'])
)
printMatch('omega 2',
  testMatch(['epsilon', 'omega'])
)
printMatch('omega red',
  testMatch(['omega'])
)
printMatch('a/b/c',
  testMatch(['a', 'b', 'c'])
)
printMatch('a',
  testMatch(['a'])
)
printMatch('b',
  testMatch(['b'])
)
printMatch('c',
  testMatch(['c'])
)
printMatch('a/b/:shit',
  testMatch(['a', 'b', ':shit'])
)
// instigate :: List Route -> List String
instigate = (routes, locationPath) => pipe(
  // IO.trace('instigate - locationPath'),
  split('/'),
  filter(notEquals('')),
  // IO.trace('instigate - locationSegments'),
  ifElse(
    pipe(len, lt(1)),
    slice(1, Infinity),
    always([])
  ),
  // IO.trace('instigate - cleanedSegments'),
  matchesURI(routes)
)(locationPath)

matchy = instigate(
  SAMPLE_ROUTES
)

IO.trace('instigate', matchy('/a/b/:c'))
IO.trace('instigate 2', matchy('localhost:5050/a/b/:c'))
IO.trace('instigate 3', matchy('/nope'))
#-
  if (typeof window !== 'undefined') {
    console.log('here', getLocation())
    console.log('instigate 3', matchy(getLocation()))
  }
-#

#-
{Browser}
  window.instigate = instigate
  window.matchesURI = matchesURI
{/Browser}
-#

