import IO from "IO"
import { Just, Nothing } from 'Maybe'
import type { Element } from 'MadUI'
import {} from 'Number'
import { split } from 'String'
import { filter, reduce, concat, nth, find, len, slice } from 'List'
import { memoize, ifElse, identity, always, notEquals, any } from 'Function'
import { lt } from 'Compare'

import { startsWith } from './String'
import { addIndex } from './Function'

// Pitch!
// notEquals should become `isNot`
// equals should get an alias `is`

// !TODO: change when nullary functions land
getLocation = (_) => #- window.location.pathname -#

// applyRelativeTo :: a -> (b -> c) -> List b -> c
// applyRelativeTo = (that, fn, xs) => #- fn.apply(that, xs) -#
// apply = applyRelativeTo(null)

export alias RouteView = {
  path :: String
}

// selectFrom :: List RouteView -> List String -> List Maybe a
selectFrom = (routes, routeParts) => addIndex(map)(
  (_, i) => nth(i, routes)
)(routeParts)

conditionalTaggedLog :: Boolean -> String -> String -> a -> a
conditionalTaggedLog = (condition, tag, x, y) => (
  if (condition) {
    IO.trace(tag ++ x, y)
  } else {
    y
  }
)

CONFIG_SHOW_LOGS = true

taggedLog = conditionalTaggedLog(CONFIG_SHOW_LOGS)

shout :: String -> (a -> b) -> a -> b
shout = (tag, fn, a) => pipe(
  taggedLog,
  (tagger) => pipe(
    tagger('input'),
    fn,
    tagger('output')
  )(a)
)(tag)

shout2 = (tag, fn, a, b) => shout(tag, fn(a), b) 

type Match = ExplicitMatch | WildcardMatch | NoMatch

export lookForMatches = (routes, given) => pipe(
  ifElse(
    any(startsWith(':')),
    always([WildcardMatch]),
    pipe(
      selectFrom(routes),
      map(where {
        Just(_) => ExplicitMatch
        Nothing => NoMatch
      })
    )
  )
)(given)
// export lookForMatchesWithLogs = shout2(lookForMatches)

// testURI :: List RouteView -> List a -> List Match
export testURI = (routes, given) => map(
  pipe(
    .path,
    split('/'),
    slice(1, Infinity),
    ifElse(
      pipe(len, notEquals(len(given))),
      always([NoMatch]),
      lookForMatches(routes)
    )
  )
)(routes)
// export testURIWithLogs = shout2(testURI) 

matchesURI :: List RouteView -> List a -> Boolean
export matchesURI = (routes, given) => pipe(
  testURI(routes),
  any(any(where {
    ExplicitMatch => true
    WildcardMatch => true
    NoMatch => false
  }))
)(given)
// export matchesURIWithLogs = shout2(matchesURI)

instigate :: List RouteView -> String -> Boolean
export instigate = (routes, locationPath) => pipe(
  split('/'),
  filter(notEquals('')),
  ifElse(
    pipe(len, lt(1)),
    slice(1, Infinity),
    always([])
  ),
  matchesURI(routes)
)(locationPath)

SAMPLE = [
  { path: '/alpha/beta' },
  { path: '/gamma/delta/:epsilon' },
  { path: '/name/:name/detail/:detail' }
]
testInstigate = instigate(SAMPLE)
#-
  if (typeof window !== 'undefined') {
    console.log('here', getLocation())
    console.log('instigate', testInstigate(getLocation()))
    console.log('instigate cool', testInstigate('/gamma/delta/cool'))
    console.log('instigate fence', instigate(SAMPLE)('/name/brekk/detail/testing'))
  }
-#

#-
{Browser}
  // window.instigate = instigate
  // window.traceOnce = traceOnce
  window.testURI = testURI
  window.matchesURI = matchesURI
  window.lookForMatches = lookForMatches
{/Browser}
-#

