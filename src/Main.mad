import IO from "IO"
import { Just, Nothing } from 'Maybe'
import type { Maybe } from 'Maybe'
// import type { Element } from 'MadUI'
import {} from 'Number'
import { split } from 'String'
import { includes, tail, filter, nth, len, find } from 'List'
import { equals, identity, ifElse, always, notEquals, any } from 'Function'
import { lt } from 'Compare'
// import { fst } from 'Tuple'

import { startsWith } from './String'
import { addIndex } from './Function'

imap = addIndex(map)

// !TODO: change when nullary functions land
getLocation = (_) => #- window.location.pathname -#

// applyRelativeTo :: a -> (b -> c) -> List b -> c
// applyRelativeTo = (that, fn, xs) => #- fn.apply(that, xs) -#
// apply = applyRelativeTo(null)

export alias RouteView = {
  path :: String
}

conditionalTaggedLog :: Boolean -> String -> String -> a -> a
conditionalTaggedLog = (condition, tag, x, y) => (
  condition
    ? IO.trace(tag ++ x, y)
    : y
)

CONFIG_SHOW_LOGS = true

taggedLog = conditionalTaggedLog(CONFIG_SHOW_LOGS)

export type Match String = ExplicitMatch(String) | WildcardMatch(String) | NoMatch
alias LocationParts = List String

selectFrom :: List RouteView -> LocationParts -> List (Maybe RouteView)
selectFrom = (routes, routeParts) => addIndex(map)(
  (_, i) => nth(i, routes)
)(routeParts)


parseURI :: List RouteView -> LocationParts -> List (Match String)
export parseURI = (routes, given) => pipe(
  ifElse(
    any(startsWith(':')),
    pipe(
      map((x) => startsWith(':', x)
        ? WildcardMatch(x)
        : includes(x, given)
          ? ExplicitMatch(x)
          : NoMatch
      )
    ),
    pipe(
      selectFrom(routes),
      imap((w, i) => pipe(
        where {
          Just(x) => pipe(
            .path,
            split('/'),
            nth(i, $),
            where {
              Just(y) => ExplicitMatch(y)
              Nothing => NoMatch
            }
          )(x)
          Nothing => NoMatch
        }
      )(w))
    )
  )
)(given)

coerceString :: a -> String
coerceString = (x) => #- x.toString() -#

coerceBool :: a -> Boolean
coerceBool = (x) => #- !!x -#

initialPath = pipe(
  .path,
  split('/'),
  filter(coerceBool)
)

testURI :: List RouteView -> LocationParts -> List (List (Match String))
export testURI = (routes, given) => map(
  pipe(
    initialPath, 
    ifElse(
      pipe(len, notEquals(len(given))),
      always([NoMatch]),
      parseURI(routes)
    )
  )
)(routes)

matchToBoolean :: Match(String) -> Boolean
matchToBoolean = (x) => pipe(
  where {
    ExplicitMatch(_) => true
    WildcardMatch(_) => true
    NoMatch => false
  }
)(x)

matchesURI :: List RouteView -> LocationParts -> Boolean
export matchesURI = (routes, given) => pipe(
  testURI(routes),
  any(any(matchToBoolean))
)(given)

decodeURI = (x) => #- decodeURIComponent(x) -#

// transformPathToParams :: List RouteView -> LocationParts -> List (List 
transformPathToParams = (routes, given) => pipe(
  map(pipe(
    initialPath,
    ifElse(
      pipe(len, equals(len(given))),
      parseURI(routes),
      always([NoMatch])
    ),
    filter(matchToBoolean)
  )),
  filter(pipe(
    len,
    lt(0)
  ))
    // filter(startsWith(':'))
    // map(tail)
    // selectFrom(routes)
    // imap((propName, i) => <Just(propName), decodeURIComponent>)
)(routes)

instigateHead :: String -> LocationParts
instigateHead = pipe(
  split('/'),
  filter(notEquals('')),
  ifElse(
    pipe(len, lt(1)),
    identity,
    always([])
  )
)

// instigate :: List RouteView -> String -> List (List {given :: List String, segments :: Match(String) })
export instigate = (routes, locationPath) => pipe(
  instigateHead,
  ifElse(
    matchesURI(routes),
    transformPathToParams(routes),
    always([])
  )
)(locationPath)

SAMPLE = [
  { path: '/alpha/beta' },
  { path: '/gamma/delta/:epsilon' },
  { path: '/name/:name/detail/:detail' }
]

j2 = (x) => #- JSON.stringify(x, null, 2) -#

testInstigate = pipe(
  instigate(SAMPLE)
  // j2,
  // IO.trace('instigated')
)
#-
  if (typeof window !== 'undefined') {
    console.log("SAMPLE DATA", JSON.stringify(SAMPLE, null, 2))
    console.log('here', getLocation())
    console.log('instigate / ', testInstigate(getLocation()))
    console.log('instigate /alpha', testInstigate('/alpha'))
    console.log('instigate /alpha/beta', testInstigate('/alpha/beta'))
    console.log('instigate /gamma/delta/cool', testInstigate('/gamma/delta/cool'))
    console.log('instigate /name/brekk/detail/testing', instigate(SAMPLE)('/name/brekk/detail/testing'))
  }
-#

#-
{Browser}
  window.instigate = instigate
  // window.traceOnce = traceOnce
  window.testURI = testURI
  window.matchesURI = matchesURI
  window.parseURI = parseURI
{/Browser}
-#

