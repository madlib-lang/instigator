import IO from "IO"
import { Just, Nothing } from 'Maybe'
import type { Maybe } from 'Maybe'
// import type { Element } from 'MadUI'
import {} from 'Number'
import { split } from 'String'
import { includes, tail, filter, nth, len, find } from 'List'
import { equals, identity, ifElse, always, notEquals, any } from 'Function'
import { lt } from 'Compare'
// import { fst } from 'Tuple'

import { startsWith } from './String'
import { addIndex } from './Function'

imap = addIndex(map)

// !TODO: change when nullary functions land
getLocation = (_) => #- window.location.pathname -#

// applyRelativeTo :: a -> (b -> c) -> List b -> c
// applyRelativeTo = (that, fn, xs) => #- fn.apply(that, xs) -#
// apply = applyRelativeTo(null)

/**
 * RouteView type
 * @since 0.0.1
 */
export alias RouteView = {
  path :: String
}

initialPath = pipe(
  .path,
  split('/')
)

/**
 * Log sometimes
 * 
 * @since 0.0.1
 */
conditionalTaggedLog :: Boolean -> String -> String -> a -> a
conditionalTaggedLog = (condition, tag, x, y) => (
  condition
    ? IO.trace(tag ++ x, y)
    : y
)

CONFIG_SHOW_LOGS = true

taggedLog = conditionalTaggedLog(CONFIG_SHOW_LOGS)

/**
 * Match type
 * @since 0.0.1
 */
export type Match String = ExplicitMatch(String)
                         | WildcardMatch(String)
                         | NoMatch
/**
 * LocationParts type
 * @since 0.0.1
 */
alias LocationParts = List String

// selectFrom :: List RouteView -> LocationParts -> List (Maybe RouteView)
selectFrom = (routes, routeParts) => addIndex(map)(
  (_, i) => nth(i, routes)
)(routeParts)

matchesWildcards :: LocationParts -> List (Match String)
matchesWildcards = (given) => map(
  (x) => startsWith(':', x)
    ? WildcardMatch(x)
    : x != '' && includes(x, given)
      ? ExplicitMatch(x)
      : NoMatch
)(given)

matchesExplicits :: List RouteView -> LocationParts -> List (Match String)
matchesExplicits = (routes, given) => pipe(
  IO.trace('given route'),
  selectFrom(routes),
  IO.trace('selected route'),
  imap((w, i) => pipe(
    where {
      Just(x) => pipe(
        initialPath,
        nth(i),
        where {
          Just(y) => y != '' ? ExplicitMatch(y) : NoMatch
          Nothing => NoMatch
        }
      )(x)
      Nothing => NoMatch
    }
  )(w))
)(given)

parseURI :: List RouteView -> LocationParts -> List (Match String)
export parseURI = (routes, given) => pipe(
  ifElse(
    any(startsWith(':')),
    matchesWildcards,
    matchesExplicits(routes)
  )
)(given)

coerceString :: a -> String
coerceString = (x) => #- x.toString() -#

coerceBool :: a -> Boolean
coerceBool = (x) => #- !!x -#



testURI :: List RouteView -> LocationParts -> List (List (Match String))
export testURI = (routes, given) => map(
  pipe(
    initialPath, 
    parseURI(routes)
  )
)(routes)

/**
 * Convert a Match to a Boolean
 *
 * @since 0.0.1
 * @example
 * matchToBoolean(WildcardMatch('*')) // true
 * matchToBoolean(ExplicitMatch('name')) // true
 * matchToBoolean(NoMatch) // false
 */
matchToBoolean :: Match(String) -> Boolean
matchToBoolean = (x) => pipe(
  where {
    ExplicitMatch(_) => true
    WildcardMatch(_) => true
    NoMatch => false
  }
)(x)

/**
 * Given a list of routes and a location array, return a Boolean
 *
 * @since 0.0.1
 * @example
 * SAMPLES = [{path: '/cool'}]
 * matchesURI(SAMPLES, '/cool') // true
 */
matchesURI :: List RouteView -> LocationParts -> Boolean
export matchesURI = (routes, given) => pipe(
  testURI(routes),
  any(any(matchToBoolean))
)(given)

decodeURI = (x) => #- decodeURIComponent(x) -#

/**
 * Given a list of routes and a location array, return a List of Lists of Matches
 *
 * @since 0.0.1
 * @example
 * SAMPLES = [{path: '/cool'}]
 * transformPathToParams(SAMPLES, '/cool') // ExplicitMatch('/cool')
 */
// transformPathToParams :: List RouteView -> LocationParts -> List (List 
transformPathToParams = (routes, given) => pipe(
  map(pipe(
    initialPath,
    ifElse(
      pipe(len, equals(len(given))),
      parseURI(routes),
      always([NoMatch])
    )
  ))
)(routes)

instigateHead :: String -> LocationParts
instigateHead = pipe(
  split('/')
  // filter(notEquals('')),
  /*
  ifElse(
    pipe(len, lt(1)),
    identity,
    always([])
  )
  */
)

stringTail = (x) => #- x.slice(1, Infinity) -#


/**
 * Produce a list of matched routes
 * 
 * @since 0.0.1
 */
// instigate :: List RouteView -> String -> List (List {given :: List String, segments :: Match(String) })
export instigate = (routes, locationPath) => pipe(
  instigateHead,
  (given) => ifElse(
    matchesURI(routes),
    pipe(
      transformPathToParams(routes),
      // filter(any(matchToBoolean)),
      // map(filter(matchToBoolean)),
      map(imap((m, i) => pipe(
          where {
            ExplicitMatch(x) => Just({kind: 'explicit', match: x, value: x})
            WildcardMatch(e) => pipe(
              nth(i),
              map((y) => ({ kind: 'wildcard', match: stringTail(e), value: y }))
            )(given)
            NoMatch => Nothing
          }
        )(m)
      )),
      map(map(where {
        Just(x) => x
        Nothing => ({kind: 'nothing', match: 'none', value: ''})
      }))
      /*
      nth(0),
      where {
        Just(x) => x
        Nothing => []
      }
      */
    ),
    always([]),
    given
  )
)(locationPath)

SAMPLE = [
  { path: '/zeta' },
  { path: '/alpha/beta' },
  { path: '/gamma/delta/:epsilon' },
  { path: '/name/:name/detail/:detail' }
]

j2 = (x) => #- JSON.stringify(x, null, 2) -#

testInstigate = pipe(
  instigate(SAMPLE)
  /*
  map(selectFrom(SAMPLE)),
  map(map(where {
    Just(a) => a
    Nothing => ''
  }))
  */
  // j2,
  // IO.trace('instigated')
)
#-
  if (typeof window !== 'undefined') {
    console.log("SAMPLE DATA", JSON.stringify(SAMPLE, null, 2))
    console.log('here', getLocation())
    console.log('instigate / ', testInstigate(getLocation()))
    console.log('instigate /alpha', testInstigate('/alpha'))
    console.log('instigate /alpha/beta', testInstigate('/alpha/beta'))
    console.log('instigate /gamma/delta/cool', testInstigate('/gamma/delta/cool'))
    console.log('instigate /name/brekk/detail/testing', instigate(SAMPLE)('/name/brekk/detail/testing'))
  }
-#

#-
{Browser}
  window.instigate = instigate
  // window.traceOnce = traceOnce
  window.testURI = testURI
  window.matchesURI = matchesURI
  window.parseURI = parseURI
{/Browser}
-#

